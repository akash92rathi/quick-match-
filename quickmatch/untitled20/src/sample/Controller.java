package sample;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;

import java.util.ArrayList;

public class Controller {

private ArrayList<String>question=new ArrayList<String>(10);
private ArrayList<Integer>marks=new ArrayList<Integer>(10);
private int previous=-1;
private ArrayList<String>answer=new ArrayList<String>(10);
private boolean check[]=new boolean[10];
private int solution[]=new int[10];

    @FXML
    private Button one;
    @FXML
    private Button two;
    @FXML
    private Button three;
    @FXML
    private Button four;
    @FXML
    private Button five;
    @FXML
    private Button six;
    @FXML
    private Button seven;
    @FXML
    private Button eight;
    @FXML
    private Button nine;
    @FXML
    private Button ten;
    @FXML
    private Button elven;


    private Button lost;


    @FXML
    private TextArea textarea;

    @FXML
    private TextField textfield;

    @FXML
    private TextArea score;

    @FXML
    private TextArea total;
    @FXML
    private Label lab;
    @FXML
    private Label time;

    @FXML
    public void initialize()
    {


        for(int i=0;i<10;i++)
        {
            marks.add(0);
            String p="50";
            answer.add(p);
            check[i]=false;
        }
        String s;
        s="Q1.\n    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.\n    The sum of these multiples is 23." +
                "\n" +
                "     Find the sum of all the multiples of 3 or 5 below 1000.";
        question.add(s);
        solution[0]=233168;
        s="Q2.\n     Each new term in the Fibonacci sequence is generated by adding the previous two terms.\n     By starting with 1 and 2, the first 10 terms will be:\n" +
                "\n" +
                "     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n" +
                "\n" +
                "     By considering the terms in the Fibonacci sequence whose values \n  do not exceed 10000000, find the sum of the even-valued terms.";
        question.add(s);
        solution[1]=4613732;

//        s="Q3.\n     The prime factors of 13195 are 5, 7, 13 and 29.\n" +
//                "" +
//                "     What is the largest prime factor of the number 600851475143 ?";
        s="Q3.\n   ->You have given following algorithm:\n" +
                "\n" +
                "    step1:  declare a ,value,i\n" +
                "    step2: initialize a=999 , i=0, value = 1\n" +
                "    step3:  repeat steps until  i<=2*a \n" +
                "                 value *= (a-i)\n                  i++\n" +
                "   Determine (value%mod) where mod =10^9+7";
        question.add(s);
        solution[2]=0;
        s="Q4.\n    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n" +
                "" +
                "     What is the 10001st prime number? ";
        question.add(s);
        solution[3]=104743;
        s="Q5.\n     2520 is the smallest number that can be divided by each of the numbers from 1 to 10 \n    without any remainder." +

                "What is the smallest positive number that is evenly divisible \n     by all of the numbers from 1 to 20?";
        question.add(s);
        solution[4]=232792560;

        s="Q6.\n    Find the sum of difference of ascii value of all small letters to corresponding \n" +
                "    capital letters in alphabet\n ";

        question.add(s);
        solution[5]=832;
//        s="Q7.\n     Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down,\n" +
//                "     there are exactly 6 routes to the bottom right corner.\n" +
//                "\n    How many such routes are there through a 20×20 grid?\n" +
//                "\n  ";
//        question.add(s);

        s="Q7.\n    A substring is contiguous part of an string.For example string \"abcd\" \n" +
                "    all substrings are \"a\",\"b\",\"c\",\"d\",\"ab\",\"bc\",\"cd\",\"abc\",\"bcd\",\"abcd\".\n" +
                "    how many substring will form for string \"" +
                "zyxwvutsrq\"\n";
        question.add(s);
        solution[6]=55;

        s="Q8.\n     An array of size 20  below find the greatest product off four adjacent number.\n\n" +
                "    86,  56,  00,  48,  35,  71,  89,  07, 05,  99, 79,  6,  12,  60,  21,  75,  69,  77,  3,  12";
        question.add(s);
        solution[7]=10615920;

        s="Q9 \n    2 Power 15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\n" +
                "\n" +
                "    What is the sum of the digits of the number 2 Power 1000?\n" +
                " \n" +
                "    (Here power represent power function )";
        s="Q9.\n    You are given a sequence whose  T(n)  term is\n" +
                "\n" +
                "    T(n) = n^2 - (n - 1)^2\n" +
                "   You have to evaluate the series\n\n" +

                "   S(n) = T(1)  +  T(2)  + T(3)  . . . T(n)\n\n" +

                "Find  S(10000)  mod  (10^9 + 7).\n  ";
        question.add(s);
        solution[8]=666665338;
        s="Q10\n    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n" +
                "\n" +
                "a^2 + b^2 = c^2\n" +
                "For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n" +
                "\n" +
                "There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n" +
                "Find the product abc.";
        question.add(s);
        solution[9]=31875000;

        s= "Instruction : \n 1.All question have equal weightage.\n 2. A person who will solve maximum questions in shortage time will be winner. \n 3.  Participant can use C, C++, Java or Python language to sole any problem. \n 4.  Submit answer in answer field without any extra space.\n " +
                "5.At bottom 10 butten is given click any one to \n reach that question & start the competetion.    ";
        textarea.setText(s);

        score.setText("0");


    }

@FXML
        public  void clickon(ActionEvent e)
{






    if(e.getSource().equals(one))
    {
        lost=one;
        textarea.setText(question.get(0));
        previous=0;
        textfield.clear();

         int  value=100;
        if(marks.get(0).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
        }
        else if(check[0])
        {
            lab.setTextFill(Color.RED);
            lab.setText("wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(0).toString();
score.setText(u);
    }

    else if(e.getSource().equals(two))
    {
        lost=two;
        textarea.setText(question.get(1));
        previous=1;
        textfield.clear();
        int value=100;
        if(marks.get(1).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("correct");
        }

        else if(check[1])
        {
            lab.setTextFill(Color.RED);
            lab.setText("wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }

        String u=marks.get(1).toString();
        score.setText(u);


    }
    else if(e.getSource().equals(three))
    {
        lost=three;
        textarea.setText(question.get(2));
        previous=2;
        textfield.clear();
        int value=100;
        if(marks.get(2).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("correct");

        }

        else if(check[2])
        {
            lab.setTextFill(Color.RED);
            lab.setText("wrong");

        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }

        String u=marks.get(2).toString();
        score.setText(u);


    }
    else if(e.getSource().equals(four))
    {
        lost=four;
        textarea.setText(question.get(3));
        previous=3;
        textfield.clear();
        int value=100;

        if(marks.get(3).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
        }

        else if(check[3])
        {
            lab.setTextFill(Color.RED);
            lab.setText("Wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(3).toString();
        score.setText(u);

    }
    else if(e.getSource().equals(five))
    {
        lost=five;
        textarea.setText(question.get(4));
        previous=4;
        textfield.clear();
        int value=100;

        if(marks.get(4).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
        }

        else if(check[4])
        {
            lab.setTextFill(Color.RED);
            lab.setText("Wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(4).toString();
        score.setText(u);

    }

    else if(e.getSource().equals(six))
    {
        lost=six;
        textarea.setText(question.get(5));
        previous=5;
        textfield.clear();
        int value=100;

        if(marks.get(5).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
        }

        else if(check[5])
        {
            lab.setTextFill(Color.RED);
            lab.setText("Wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(5).toString();
        score.setText(u);

    }

    else if(e.getSource().equals(seven))
    {
        lost=seven;
        textarea.setText(question.get(6));
        previous=6;
        textfield.clear();
        int value=100;
        if(marks.get(6).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
        }

        else if(check[6])
        {
            lab.setTextFill(Color.RED);
            lab.setText("Wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(6).toString();
        score.setText(u);

    }

    else if(e.getSource().equals(eight))
    {
        lost=eight;
        textarea.setText(question.get(7));
        previous=7;
        textfield.clear();
        int value=100;
        if(marks.get(7).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);

            lab.setText("Correct");
        }

        else if(check[7])
        {
            lab.setTextFill(Color.RED);
            lab.setText("Wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(7).toString();
        score.setText(u);

    }

    else if(e.getSource().equals(nine))
    {
        lost=nine;
        textarea.setText(question.get(8));
        previous=8;
        textfield.clear();
        int value=100;
        if(marks.get(8).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
        }

        else if(check[8])
        {
            lab.setTextFill(Color.RED);
            lab.setText("Wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(8).toString();
        score.setText(u);

    }

    else if(e.getSource().equals(ten))
    {
        lost=ten;
        textarea.setText(question.get(9));
        previous=9;
        textfield.clear();
        int value=100;
        if(marks.get(9).equals(value))
        {
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
        }
        else if(check[9])
        {
            lab.setTextFill(Color.RED);
            lab.setText("Wrong");
        }
        else
        {
            lab.setTextFill(Color.BLACK);
            lab.setText("Not Submit");
        }
        String u=marks.get(9).toString();
        score.setText(u);


    }



     if(e.getSource().equals(elven))
    {

        String ok=textfield.getText();
        int ans=solution[previous];
        String ok1= String.valueOf(ans);

        check[previous]=true;

       if(ok.equals(ok1))
       {

           //System.out.println(previous);

           int value=0;
           if(marks.get(previous).equals(value))
           {

               String measure=java.time.LocalTime.now().toString();
               time.setText(measure);

           }

           marks.set(previous,100);
           String p="100";
           score.setText(p);
           lab.setTextFill(Color.FORESTGREEN);
           lab.setText("Correct");
           lost.getStyleClass().removeAll("button");
           lost.getStyleClass().add("add");

           lost.setStyle("-fx-background-color: #1aff1a;-fx-pref-height: 45px;-fx-pref-width: 40px; -fx-alignment: center;");


          // lost.setStyle("-fx-alignment: center;");
           //lost.resize(50,50);


//           System.out.println(textfield.getText().toString());
//
//           System.out.println(previous);
//
//           System.out.println(answer.get(previous));


       }

       else
       {
           String p="Correct";
           int value=0;
           int value2=100;
           if(lab.getText().equals(p))
           {
               lab.setTextFill(Color.RED);
               lab.setText("Wrong");
           }


           else if(marks.get(previous).equals(value))
           {


               lost.setStyle("-fx-background-color: #ff3300;-fx-pref-height: 45px;-fx-pref-width: 40px; -fx-alignment: center; ");
               lab.setTextFill(Color.RED);
               lab.setText("Wrong");


           }

           else if(marks.get(previous).equals(value2))
           {
               lab.setText("Wrong");
               lab.setTextFill(Color.RED);

           }

       }




    }


    int sum=0;
    for(int i=0;i<10;i++)
    {
        sum+=marks.get(i);

    }

    String s=Integer.toString(sum);

    total.setText(s);


}

@FXML
    public void onkeyrelease(KeyEvent e)
{

    if(e.getCode()==KeyCode.ENTER && previous!=-1 )
    {

        String ok=textfield.getText();
        String ok1=String.valueOf(solution[previous]);

        check[previous]=true;

        if(ok.equals(ok1))
        {

            //System.out.println(previous);

            int value=0;
            if(marks.get(previous).equals(value))
            {

                String measure=java.time.LocalTime.now().toString();
                time.setText(measure);

            }

            marks.set(previous,100);
            String p="100";
            score.setText(p);
            lab.setTextFill(Color.FORESTGREEN);
            lab.setText("Correct");
            lost.getStyleClass().removeAll("button");
            lost.getStyleClass().add("add");

            lost.setStyle("-fx-background-color: #1aff1a;-fx-pref-height: 45px;-fx-pref-width: 40px; -fx-alignment: center;");


            // lost.setStyle("-fx-alignment: center;");
            //lost.resize(50,50);


//           System.out.println(textfield.getText().toString());
//
//           System.out.println(previous);
//
//           System.out.println(answer.get(previous));


        }

        else
        {
            String p="Correct";
            int value=0;
            int value2=100;
            if(lab.getText().equals(p))
            {

                lab.setTextFill(Color.RED);
                lab.setText("Wrong");
            }


            else if(marks.get(previous).equals(value))
            {


                lost.setStyle("-fx-background-color: #ff3300;-fx-pref-height: 45px;-fx-pref-width: 40px; -fx-alignment: center;");
                lab.setTextFill(Color.RED);
                lab.setText("Wrong");


            }

            else if(marks.get(previous).equals(value2))
            {
                lab.setTextFill(Color.RED);
                lab.setText("Wrong");

            }

        }







    int sum=0;
    for(int i=0;i<10;i++)
    {
        sum+=marks.get(i);

    }

    String s=Integer.toString(sum);

    total.setText(s);



}


}



}
